noscript - It gets used when someone had disabled JS, or when someone browser doesn't support JS it will show that message which we provide.
React file can be saved as .js or .jsx
Remember, In React when we write code in JSX each tags should be closed.
Cases --> 
camel Case - (noOfAge); 
Pascal Case - (NoOfAge); 
Snake Case - (no_of_age/No_Of_Age/NO_OF_AGE);
Kebab Case - (no-of-age/No-Of-Age/NO-OF-AGE).



1] REACT Creation => 

1. Simple to create react app use - npx create-react-app appname;
appname should be in small letter only. eg -
reacttut    - right
Reacttut    - wrong,    ReactTut    - wrong,    ReactTut    - wrong.
after creating go to the created appname folder & do npm run, 
For installing package - npm i packagename  OR npm install packagename --save.

2. By using vite or parcel -
npm create vite@latest, after that give project name & select a framework & variant(language), npm install & npm run dev.





2] REACT =>
Its a JS library used for building User Interface[UI - Its a point of human-computer interaction & communication in a device. It can include display screens, keyboads, mouse & appearance of desktop. i.e (Frontend part of page)].

React is not a framework. Its a library. It is also known as ReactJS/React.js/React, we can get confused if we read some different notations in different places.
React only knows one thing to make an awesome UI with better coding structure.


History -
It was designed by Jorden Walke, software engineer at Facebook. It was first deployed for facebook News feed around 2011. In 2013, React was open sourced at JS conference.
Open Source - open source project is where the code to a certain project is completely open source, means anybody can see the code that was used when developing & also it are usually community-based & accept help from other programmers Or we can see the code & contribute if we see something is missing or our part is working better than that so developer will check if they find its great they will add.


Uses -
a. Component Based Approach[2 Component -- Class Component, Function Component] - It is one of the core building blocks of React. In other words, we can say that every application we will develop in React will be made up of pieces called components. It make the task of building UIs much easier. We can reuse the created components as much we can when we needed.

b. Declarative Approach [It are used by framework but react is library still it uses this approach] - It is a programming paradigm that expresses the logic of computation without describing its control flow.
eg. If we got one client he want to start business, so he wants us to create a website like ecommerce, the client doesn't know how actual website to develop, so basically we will add every functionality whatever required for building ecommerce website. So in this client doesnt had idea, but he had only broad idea.

c. DOM updates are handled gracefully & Virtual DOM.
d. Reusable Code - Make components & used anywhere we want.
e. React is designed for speed, speed for implementing the application simplicity & scalability.
f. SPA concept.


Why -
Created & Maintained by Facebook. It has huge community on GitHub[Before us many developer had faced the problem & it had been solved by someone, so if we stuck we can use the chrome or any browser to solve the error]. It is Component Based Architecture.





3] PreRequiste =>
PreRequiste - Learning any new language/framework what other languages we need to learn.
For React -
a. Basic knowledge of HTML, CSS, and JS. [Imp]
b. Understanding of ES6 features. [little IMP]
c. Using npm for packages.  [Not that much imp]

VS Code Extensions -
Babel JS[Whenever we write es6 concept it will highlight that], 
Babel ES6/ES7 
Javascript (ES6) code Snippets(Boilerplate)
vscode icons.





4] Installation =>
a. Install NodeJS & NPM(Node package Manager automatically gets installed when we install NodeJS).
b. Install VSCode/Sublime/Atom/Brackets, etc.
c. Install React from terminal -
    c.1.1) npm install -g create-react-app
    c.1.2) create-react-app --version (check if react had installed or not, we can use -v)
    c.1.3) create-react-app <projectname>
    OR
    c.2) npx create-react-app <projectname>
c.1] - We can use in any folder by c.1.1 & c.1.2.
c.2] - We can use in the particular folder where we had to work


node_modules - It is the repository of modules/library which we are using inside our project, whatever we are importing in our project that module or library should present inside node_modules folder. When we do npm install that time that module/library gets installed inside node_modules folder & one entry added in the package.json file OR Every packages are there.

package.json - It is used to store the metadata associated with the project as well as to store the list of dependencies packages with their versions & we had script to run or build the app.

package-lock.json - All the packages data are there.

In src folder, no need of serviceWorker.js, setupTests.js, logo.svg, App.tests.js, & css files. [Imp is App.js & index.js].

In public folder, Imp is index.html(As we know, when we had to write code for webpage we had to write in HTML, but now with the help of React we will write every <body> code in REACT, we will only change/add scripts in head tag in HTML file). 
[robots.txt - Whenever we host the website, to find out in google crawling or better SEO; manifest.json - provide application details in plain json file; then we had logos & favicon]

Which are not important its for beginner only.


Folder Structure -->
a) By using React(3000) -->
Folder - node_modules, public(favicon.ico, index.html. logos, manifest.json, robots.txt), src(App.css, App.js, App.test.js, index.css, index.js, logo.svg, serviceWorker.js, setupTest.js)
Files - package.json, package-lock.json, .gitignore, .README.md
scripts in package.json - npm start(Start app); npm run build(bundle the app into static files for production); npm test(testing); npm run eject(Removes this tool & copies build dependencies, configuration files).


b) By using Vite + React(5173) -->
Folder - node_modules, public(vite.svg), src(assets folder, App.css, App.jsx, index.css, main.jsx)
Files - package.json, package-lock.json, .gitignore, .README.md,  index.html, vite.config.js, .eslintrc.cjs(EsLint is used for validation, error handling like import, export, packages, etc..)





5] Babel (https://babeljs.io/) [Go to try it out]=>
main.jsx(Vite) or index.js/index.jsx(React) -->

var React = require("react"); // node
import React from "react";  // react (ES6 import & export)
var ReactDOM = require('react-dom');

ReactDOM.render(<h1> Hello world</h1>, document.getElementById('root'))


Code Info -->
render('what to show', 'where to show' (It deals with DOM), 'callback function') - Render method simply means show.
When we had to write HTML code we use React module, & when we had to play with DOM we use ReactDOM module.


Babel & Webpack Info -->
Babel - It is JS compiler[It converts ES6 code into normal vanilla code which our browser understand & We can write Modern JS(ES6 code & rn on browser)].
Webpack - It makes our files & folders in one bundle folder.
Babel & Webpack automatically gets installed when we install the react.

eg. if we write code -
const name = "Dipesh";
const myapp = () => {
    console.log('ok');
}
So this ES6 code basically converts into normal JS code with the help of Babel & used/display on browser.
"use strict";
var name = "Dipesh";
var myapp = function myapp() {
    console.log('ok');
}





6] JSX [in render method when we use HTML + JS Code or component & in that component when we use HTML + JS Code] => 
JSX - js extension & js XML.
With the help of JSX we can write JS code + HTML code.

import React from "react";
import ReactDOM from "react-dom";

ReactDOM.render(<h1>Raj</h1>, document.getElementById('root'));

That above line is converted in browser -
import { jsx as _jsx } from "react/jsx-runtime";
ReactDOM.render( /*#__PURE__*/_jsx("h1", {
  children: " Hello world"
}), document.getElementById('root'));

We can convert into normal/pure JS[no use of babel & react] -
var h1 = document.createElement("h1");
h1.innerHTML = "Hello world"
document.getElementById('root').appendChild(h1);


We can see we are using ReactDOM, but we are not using React, so what's the use, when we write jsx & comment import React it will throw an error, bcoz jsx is a part of React.




7] Render Multiple Elements & 8] React Fragments =>

ReactDOM.render(<h1>Raj</h1> <p>Hello</p> ,document.getElementById('root'));
We will get error - Adjacent JSX Element must be wrapped in an enclosig tag.

In Render method it only takes one single element.
So when we had to render multiple elements we had to wrap every element with an parent element i.e (<div></div>; <></>; <React.Fragment></React.Fragment>)

a) Array Elements
If our react version is 16+ we can return an array of elements for render()
ReactDOM.render([
    <h1>Raj</h1>, <p>Hello</p>, <h2>Gamers</h2>
], document.getElementById('root'))

const App = () => [
  <p key="1">React 16 can return multiple elements ❤️</p>,
  <p key="2">React 16 can return multiple elements ❤️</p>,
  <p key="3">React 16 can return multiple elements ❤️</p>,
];


To avoid array notation and manually added keys to each of the element, you can use an Aux helper function that simply returns all its children.
const Aux = props => props.children;

const Aux = props => props.children;
const App = () =>
  <Aux>
    <p>React 16 can return multiple elements ❤️</p>
    <p>React 16 can return multiple elements ❤️</p>
    <p>React 16 can return multiple elements ❤️</p>
  </Aux>;


b) Normal HTML Tags with parent container, mostly we use <div>
<div> </div>
ReactDOM.render(
    <div>
    <h1>Raj</h1> <p>Hello</p> <h2>Gamers</h2>
    </div>
, document.getElementById('root'))


c) React v16.2 introduced another way of returning multiple elements. React.Fragment abstracted in JSX way via just an empty tag. Bare in mind that JSX syntax doesn’t support attributes — use a verbose way if you need so. No extra components needed, no array notation, no keys.
Before version 16 we were using div


<> </>  (Sugar fragment)
const App = () => (
  <>
    <p>React 16 can return multiple elements ❤️</p>
    <p>React 16 can return multiple elements ❤️</p>
    <p>React 16 can return multiple elements ❤️</p>
  </>
);

const App = () => (
  <React.Fragment>
    <p>React 16 can return multiple elements ❤️</p>
    <p>React 16 can return multiple elements ❤️</p>
    <p>React 16 can return multiple elements ❤️</p>
  </React.Fragment>
);

What's the used of React Fragment or Sugar Fragment[Same O/p] ? ->
In Broweser elements it display as -->
a) when we used Array of elements - <div> <h1></h1><p></p></div>
b) when we used div - <div><div> <h1></h1><p></p></div></div> [By this we getting 2 div, its basically creating extra node in DOM & we can get confused]
c) when we used React Fragment - <div><h1></h1><p></p></div>
React.Fragment is little bit faster & it contain less memory than <div> tag.
A special fragment syntax in React 16.2 is indroduced as a syntactical sugar for fragments. i.e (<> </>)



C1] Challenge 1 : Create Web App on Top 5 Netflix Series List using JSX.



11] JSX Expression, 12] Template Literals(``), 13] JSX Attributes=>
eg.
return( <h1>My name is Raj</h1> );

const name = "Rohit";
return ( <h1>My name is Raj</h1> <h1> My Name is Name</h1>)

In JS file when we write HTML code in return is called as JSX Element but when in HTML we use JavaScript is called as JSX Expression just denoted by {} 

const name = "Raj";
return ( <h1>My name is Raj</h1> <h1> My Name is name</h1> <h1> My Name is {name}</h1> <h3>Favourite no is 5 + 2 </h3>  <h3>Favourite no is {5 + 2 <h3>Favourite no is {Math.random()} } </h3>).

In Curly braces we can use only expression, we can't use statements.
eg. if we use if(){}else{} - throw error.


Normal way to use expression -->
const name = "Rohit";
const lName = "Yadav";
<h3>My FullName is - {name} {lName}</h3>
<h3>My FullName is - {name + ' ' + lName}</h3>

Template Literal --> <h3>{`My FullName is => FirstName - ${name} & lastName - ${lName}`}</h3>


JSX Attribute -
<a href = "" target = "blank"></a>   [href & target is property but in HTML we call as "Attribute" - which provides additional information about the element].
Global Attribute(It can be used with all HTML Elements) - accesskey, class, contenteditable, dir, draggable, hidden, id, lang, spellcheck, style, tabindex, title, translate.



C2] Challenge 2: Display current Date & Time in React.



14] CSS Style(Class Vs ClassName), 15] Google Font, 16] Internal & Inline CSS =>

In HTML if we want to do external styles we used class="" or id=""
In JSX we used className="" or id=""  (if we write class instead of className, we will not get error in code but we will get warning/error in browser)
Main reason is we write className in React - bcoz in React already we had class keyword reserved with class component.

Same we can style CSS in 3 ways - Inline[just in same line using style & remember we should understand as object], Internal[defined in head or body], External[Other file]. 

For having better font just use Google Fonts. (https://fonts.google.com/). [Add that font part link in html or import that in css & use css property wherever we had to change].




C3 & MP1] Challenge 3/Main Project 1 : Create Simple Greeting message website.




18] Components, 19]Rewrite/Reused Components, 20] Import/Export ==>
In React everything is Component(divided into small parts).
Remember whenever we create component it should start with capital letter, if we start with small letter it will not work/render; & for better understanding give file name same as we had component name.
For Component in our project --> Go to - Why React folder>main.jsx file
If our file extension is .jsx so no need to write extension while importing bcoz react understand it automatically.


import means taking & export means giving, When we had only 1 function/when we don't have one function, we can use default with export. Import-export together is used to share data amongst component.
Remember while export - 
a) export default Heading [Correct].  
b) export default Heading() [Wrong - bcoz Heading is component not a function we don't need to call like this, we had to export & import that particular component to other files].
When we import a component & used that component in jsx is called as our custom element.
While exporting when we use default, & in importing we can give any name to it. But default should be for only one variable/function.
But when there will be more variable & function but we had given to one default, so rest we should export in {}, & in this we can pass many variables/functions name; But whatever we passed in {} the name should be same for variable/function in import & export.
We can use *(wildcard for all export & import but we dont use most bcoz from this we didn't get proper understanding which are exported).
When we are not using ES6 or later version in project we had to write module.exports to export multiple functions from a file. eg - module.exports = { sum , multiple }



C4] Challenge 4 : Simple Calculater App.



21] Props, Array Little Intro, Array Map method & Arrow Functions ==>
Props in Mini Projects.

Props is nothing but just an attribute/property.
eg. <input type="text" name="Raj", so when we see in console we get $0. [For value we can write $0.value, but if we do $0.myname is undefined we are getting in object form].

props("stands for properties"). It are like function arguments in JS attributes in HTML.
We can make our custom attributes/properties in JSX. It can be a data/object.
We can have a custom element also. While writing in props if we are making more data dont put in commas for different attributes.
It is one direction only means from parent to child. If we made props in parent component receive it in the childs component - in function parameters by 2 ways -
a) props.    b) Destructure.


An array is a special variable, which can hold more than one value at a time. It lets us store multiple values in a single variable.

eg. var a = "Raj", var b = "Mandar", var c = "Tarun", var d = "Vedant".
var arr = ['Raj', "Mandar", 'Tarun', "Vedant"];
var arr = new Array('Raj', "Mandar", 'Tarun', "Vedant")
var friends = friends[0]; friends[0] = "Raj";


Arrow Function -

function myname(a,b){
  return a+b 
}

const myname = (a,b) =>{
  return a+b 
}

const myname = (a,b) => a+b 


For traversing basically we will use arrays methods like map, filter but most common method use is map.

map method is used to traverse each data/loop & return data in new array rather creating any disturbances in old/original array.
It also creates a new array with the results of calling a function for every array element. It calls the provided function once for each element in array in order.

arr.map(function(currVal, index, arr), thisValue/=> {}).
currVal [Required - Value of current element], index[Optional - Array index no of current element], arr[Optional - Array object of the current element belongs to].

const old = ["Dipesh", "Mandar", "Tarun", "Vedant"];
cl(old, old[2]);
const new = old.map(function(currVal){
  return currVal
  return currVal + "Ok"; 
})
cl(new);

const studentData = [
  {id: 1, name: Raj, degree: "BSC-CS, age: 22},
  {id: 2, name: Mandar, degree: "BSC-IT, age: 23},
  {id: 3, name: Tarun, degree: "Engineer, age: 25},
  {id: 4, name: Vedant, degree: "BSC-CS, age: 20},
]
cl(studentData, studentData[1].degree);

const newStudentData = studentData.map( (currVal) => {
  return `My name is ${currVal.name}. Highest Degree is ${currVal.degree}`
})
cl(newStudentData);





22] DevTools =>
We get every error in console & when we use map method we get one error - Each chlid in a list should have a unique "key" prop. [So we should give one unique key in data but name should be key only, eg. key = {}].
Keys help react to identify which items have changed(added, removed, re-ordered). To give a unique identity to every element inside array, a key is required.

We had Components after network in inspect dom mode in browser.
For getting that we had more ways.
Go to setting>extension>Go to Web Store>React Developer Tools[in search].




23] Conditional Rendering =>
a] if Statement - We can use the if JavaScript operator to decide which component to render.
if(condition){
  // block of code to be executed if condition is true
}
else{
  // block of code to be executed if condition is false
}
b] Logical && Operator.
c] Ternary Operators - condition ? true : false





C5] Challenge 5 : Slot Machine Game [For Emoji - https://getemoji.com/]



24] Emoji in VS Code => Extension - :emojisense: / Settings (Extensions) [use Ctrl + i = emojis]




25] Hooks 