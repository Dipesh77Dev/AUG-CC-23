1] Introduction =>


1.1] Database ->
Database is collection of data in a format that can be easily accessed (Digital).
A software application used to manage our DB is called DBMS (Database Management System.



1.2] Types of Databases ->
Relational(data stored in tables) -- MySQL, Oracle, Microsoft SQL server, PostgreSQL. [Most Famous amongst them are MySQL & PostgreSQL].
Non-relational(data are not stored in tables) -- MongoDB

We use SQL to work with relational DBMS.



1.3] SQL(Structured Query Language) ->
SQL is a programming language used to interact/deal with relational databases.
It is a standard language for storing, manipulating and retrieving datas in databases Or It is used to insert, search, update, and delete database records.

SQL became a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987


What can SQL do? --
SQL can execute queries against a database
SQL can retrieve data from a database
SQL can insert records in a database
SQL can update records in a database
SQL can delete records from a database
SQL can create new databases
SQL can create new tables in a database
SQL can create stored procedures in a database
SQL can create views in a database
SQL can set permissions on tables, procedures, and views

In short SQL can be used to perform CRUD operations (C-Create, R-Read, U-Update, D-Delete).


Using SQL in our website -- 
For building a website that shows data from a database, we need:

a) An RDBMS database program (i.e. MS Access, SQL Server, MySQL)
b) To use a server-side scripting language, like PHP or ASP
c) To use SQL to get the data we want
d) To use HTML / CSS to style the page.



1.4] RDBMS(Relational Database Management System) ->
It is a program used to maintain a relational database.
It uses SQL queries to access the data in the database.

RDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.

The data in RDBMS is stored in database objects called tables & it contains one or more tables. Each table is identified by a name(e.g. "Customers" or "Orders") & contain records(rows) with data.


Table -- It is a collection of related data entries and it consists of columns and rows. 
A column holds - specific information about every record in the table.
A record (or row) - is each individual entry that exists in a table.


Relational Database --
A relational database defines database relationships in the form of tables. The tables are related to each other - based on data common to each.
eg. Suppose we have 2 tables Customer & Order,
In Customers Table - we have Customer Id & ....; & in Order Table we have Order Id, Customer Id & ... ; So in order table we are making relationship netween Order and Customer with the 'Customer Id' column.


1.5] SQL Statements ->
Most of the actions we need to perform on a database are done with SQL statements.
SQL statements consists of keywords that are easy to understand.
SQL keywords are NOT case sensitive: select is the same as SELECT, but we prefer to write in upper case.

Some database systems require a semicolon at the end of each SQL statement.
Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.


1.6] Most Important SQL Commands -
SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index





2] MySQL =>
It is a widely used relational database management system (RDBMS).
It is free and open-source.
It is ideal for both small and large applications.
It is very fast, reliable, scalable, and easy to use & it is cross-platform.
It was released in 1995.
MySQL is developed, distributed, and supported by Oracle Corporation

eg. 
a) Websites like - Facebook, Twitter, Airbnb, Booking.com, Uber, GitHub, YouTube, etc.
b) CMS(Content Management Systems) - like WordPress, Drupal, Joomla!, Contao, etc.
c) A very large number of web developers around the world.





3] Types of SQL Commands =>

DDL(Data Definition Language) : create, alter, rename, truncate & drop.
DQL(Data Query Language) : select
DML(Data Manipulation Language) : select, insert, update & delete
DCL(Data Control Language) : grant & revoke permissions to users
TCL(Transaction Control Language) : start transaction, commit, rollback, etc.





4] MySQL Queries =>

1) Creation of DB(Database) ->

a) CREATE DATABASE statement is used to create a new SQL database.
b) Syntax - CREATE DATABASE databasename; Or create database databasename;
c) ex - CREATE DATABASE testDB;

For checking list of databases - SHOW DATABASES;



2) Drop/Delete database ->

a) DROP DATABASE statement is used to drop an existing SQL database.
b) Syntax - DROP DATABASE databasename;
c) ex - DROP DATABASE testDB;

Be careful before dropping a database. Deleting a database will result in loss of complete information stored in the database!



3) Create Table ->

a) CREATE TABLE statement is used to create a new table in a database.
b) Syntax -
CREATE TABLE table_name (
    column1 datatype constraint,
    column2 datatype constraint,
    column3 datatype,
   ....
);

The column parameters specify the names of the columns of the table.
The datatype parameter specifies the type of data the column can hold (e.g. varchar, integer, date, ..., etc).

c) ex -
CREATE TABLE Persons (
    PersonID int Primary Key,
    LastName varchar(255) Not Null,
    FirstName varchar(255) Not Null,
    Address varchar(255),
    City varchar(255)
);

d) Copy of existing table -
CREATE TABLE new_table_name AS
    SELECT column1, column2,...
    FROM existing_table_name
    WHERE ....;

CREATE TABLE TestTable AS
SELECT customername, contactname
FROM customers;






5] MySQL Datatypes =>

The data type of a column defines what value the column can hold: integer, character, money, date and time, binary, and so on.

In MySQL there are three main data types: string, numeric, and date and time.

a) String Datatypes ->

a1) CHAR(size) -- A FIXED length string (can contain letters, numbers, and special characters). The size parameter specifies the column length in characters - can be from 0 to 255. Default is 1. It takes all size whether if we doesn't need that much space. eg CHAR(50).

a2) VARCHAR(size) -- A VARIABLE length string (can contain letters, numbers, and special characters). The size parameter specifies the maximum column length in characters - can be from 0 to 65535. It takes only required space for that. eg VARCHAR(50).

a3) BINARY(size) -- Equal to CHAR(), but stores binary byte strings. The size parameter specifies the column length in bytes. Default is 1

a4) VARBINARY(size) -- Equal to VARCHAR(), but stores binary byte strings. The size parameter specifies the maximum column length in bytes.

a5) TINYBLOB -- For BLOBs (Binary Large OBjects). Max length: 255 bytes

a6) TINYTEXT -- Holds a string with a maximum length of 255 characters

a7) TEXT(size) -- Holds a string with a maximum length of 65,535 bytes

a8) BLOB(size) -- For BLOBs (Binary Large OBjects). Holds up to 65,535 bytes of data.

a9) MEDIUMTEXT -- Holds a string with a maximum length of 16,777,215 characters

a10) MEDIUMBLOB -- For BLOBs (Binary Large OBjects). Holds up to 16,777,215 bytes of data

a11) LONGTEXT -- Holds a string with a maximum length of 4,294,967,295 characters

a12) LONGBLOB -- For BLOBs (Binary Large OBjects). Holds up to 4,294,967,295 bytes of data

a13) ENUM(val1, val2, val3, ...) -- A string object that can have only one value, chosen from a list of possible values. You can list up to 65535 values in an ENUM list. If a value is inserted that is not in the list, a blank value will be inserted. The values are sorted in the order you enter them

a14) SET(val1, val2, val3, ...)	-- A string object that can have 0 or more values, chosen from a list of possible values. You can list up to 64 values in a SET list


b) Number Datatypes ->

b1) BIT(size) -- A bit-value type. The number of bits per value is specified in size. The size parameter can hold a value from 1 to 64. The default value for size is 1.

b2) TINYINT(size) -- A very small integer. Signed range is from -128 to 127. Unsigned range is from 0 to 255. The size parameter specifies the maximum display width (which is 255).

b3) BOOL -- Zero is considered as false, nonzero values are considered as true.

b4) BOOLEAN -- Equal to BOOL

b5) SMALLINT(size) -- A small integer. Signed range is from -32768 to 32767. Unsigned range is from 0 to 65535. The size parameter specifies the maximum display width (which is 255)

b6) MEDIUMINT(size) -- A medium integer. Signed range is from -8388608 to 8388607. Unsigned range is from 0 to 16777215. The size parameter specifies the maximum display width (which is 255)

b7) INT(size) -- A medium integer. Signed range is from -2147483648 to 2147483647. Unsigned range is from 0 to 4294967295. The size parameter specifies the maximum display width (which is 255)

b8) INTEGER(size) -- Equal to INT(size)

b9) BIGINT(size) -- A large integer. Signed range is from -9223372036854775808 to 9223372036854775807. Unsigned range is from 0 to 18446744073709551615. The size parameter specifies the maximum display width (which is 255)

b10) FLOAT(size, d)	-- A floating point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter. This syntax is deprecated in MySQL 8.0.17, and it will be removed in future MySQL versions

b11) FLOAT(p) -- A floating point number. MySQL uses the p value to determine whether to use FLOAT or DOUBLE for the resulting data type. If p is from 0 to 24, the data type becomes FLOAT(). If p is from 25 to 53, the data type becomes DOUBLE()

b12) DOUBLE(size, d) -- A normal-size floating point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter

b13) DOUBLE PRECISION(size, d)

b14) DECIMAL(size, d) -- An exact fixed-point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter. The maximum number for size is 65. The maximum number for d is 30. The default value for size is 10. The default value for d is 0.

b15) DEC(size, d) -- Equal to DECIMAL(size,d)


c) Date & Time Types ->

c1) DATE -- Format: YYYY-MM-DD. The supported range is from '1000-01-01' to '9999-12-31'

c2) DATETIME(fsp) -- A date and time combination. Format: YYYY-MM-DD hh:mm:ss. The supported range is from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'. Adding DEFAULT and ON UPDATE in the column definition to get automatic initialization and updating to the current date and time

c3) TIMESTAMP(fsp) -- A timestamp. TIMESTAMP values are stored as the number of seconds since the Unix epoch ('1970-01-01 00:00:00' UTC). Format: YYYY-MM-DD hh:mm:ss. The supported range is from '1970-01-01 00:00:01' UTC to '2038-01-09 03:14:07' UTC. Automatic initialization and updating to the current date and time can be specified using DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP in the column definition

c4) TIME(fsp) -- A time. Format: hh:mm:ss. The supported range is from '-838:59:59' to '838:59:59'

c5) YEAR -- A year in four-digit format. Values allowed in four-digit format: 1901 to 2155, and 0000.
MySQL 8.0 does not support year in two-digit format.


Imp - CHAR(50), VARCHAR(50), INT, FLOAT, BOOLEAN, DATE.

TINYINT(-128 to 127).
TINYINT UNSIGNED (0 to 255)  [UNSIGNED - No negative sign & from -128 to -1 it had been taken to 255 size].